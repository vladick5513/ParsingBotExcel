import os
import logging
import pandas as pd
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import aiohttp
from lxml import html
import re

from app.database import async_session_factory
from app.bot.crud import create_sources_bulk, update_sources_prices_bulk, get_all_sources

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω
def normalize_price(price_text):
    if not price_text:
        return None

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç–æ–π
    price_text = re.sub(r'[^\d.,]', '', price_text)

    # –ó–∞–º–µ–Ω–∞ –∑–∞–ø—è—Ç–æ–π –Ω–∞ —Ç–æ—á–∫—É
    price_text = price_text.replace(',', '.')

    try:
        return float(price_text)
    except ValueError:
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã —Å —Å–∞–π—Ç–∞
async def parse_price(url, xpath):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=30) as response:
                if response.status == 200:
                    content = await response.text()
                    tree = html.fromstring(content)
                    elements = tree.xpath(xpath)

                    if elements:
                        price_text = elements[0].text_content().strip()
                        return normalize_price(price_text)
    except Exception as e:
        logging.error(f"Error parsing {url}: {e}")

    return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑—é–∑—é–±–ª–∏–∫–æ–≤. "
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å Excel-—Ñ–∞–π–ª.",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"
@router.message(F.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
async def upload_file_request(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–ª—è–º–∏:\n"
        "- title (–Ω–∞–∑–≤–∞–Ω–∏–µ)\n"
        "- url (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –∏—Å—Ç–æ—á–Ω–∏–∫)\n"
        "- xpath (–ø—É—Ç—å –∫ —ç–ª–µ–º–µ–Ω—Ç—É —Å —Ü–µ–Ω–æ–π)"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
@router.message(F.document)
async def process_file(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    if not message.document.file_name.endswith(('.xlsx', '.xls')):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)")
        return

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    await message.answer("–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    file_id = message.document.file_id
    file_info = await message.bot.get_file(file_id)
    file_path = file_info.file_path

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    temp_file = f"temp_{message.from_user.id}.xlsx"
    await message.bot.download_file(file_path, temp_file)

    try:
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
        df = pd.read_excel(temp_file)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['title', 'url', 'xpath']
        if not all(col in df.columns for col in required_columns):
            await message.answer(
                "–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (title, url, xpath)."
            )
            os.remove(temp_file)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
        rows_count = min(len(df), 10)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–≤—å—é
        preview = "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n\n"

        for i in range(rows_count):
            row = df.iloc[i]
            preview += f"*–ó–∞–ø–∏—Å—å #{i + 1}:*\n"
            preview += f"üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* {row['title']}\n"
            preview += f"üîó *URL:* {row['url']}\n"
            preview += f"üîç *XPath:* {row['xpath']}\n\n"

        if len(df) > rows_count:
            preview += f"...–∏ –µ—â–µ {len(df) - rows_count} –∑–∞–ø–∏—Å–µ–π"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        await message.answer(preview, parse_mode="Markdown")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        sources_data = df.to_dict('records')

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with async_session_factory() as session:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                sources = await create_sources_bulk(session, sources_data)
                await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –î–æ–±–∞–≤–ª–µ–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")

                # –ó–∞–¥–∞—á–∞ —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–æ–π: –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
                await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω —Å —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤...")

                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                tasks = []
                for source in sources:
                    task = parse_price(source.url, source.xpath)
                    tasks.append((source.id, task))

                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                price_results = {}
                for source_id, task in tasks:
                    price = await task
                    if price is not None:
                        price_results[source_id] = price

                if price_results:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    await update_sources_prices_bulk(session, price_results)

                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    all_sources = await get_all_sources(session)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Å—Ä–µ–¥–Ω–∏—Ö —Ü–µ–Ω–∞—Ö
                    price_report = "üí∞ *–°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∑—é–∑—é–±–ª–∏–∫–æ–≤ –ø–æ —Å–∞–π—Ç–∞–º:*\n\n"
                    for source in all_sources:
                        if source.avg_price is not None:
                            price_report += f"*{source.title}*: {source.avg_price:.2f} ‚ÇΩ\n"
                        else:
                            price_report += f"*{source.title}*: ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É\n"

                    await message.answer(price_report, parse_mode="Markdown")
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ —Å–∞–π—Ç–∞.")

            except Exception as e:
                await session.rollback()
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        os.remove(temp_file)